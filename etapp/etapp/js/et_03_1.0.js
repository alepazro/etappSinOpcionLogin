//util
var w = $(window).width(), h = $(window).height(); function getNow() { try { var a = new Date, d = a.getMonth() + 1, b = a.getDate(), c = a.getFullYear(); return d + "/" + b + "/" + c } catch (e) { alert("getNow: " + e.description) } } function loadHoursCombo(a) { try { for (var d = "", b = 0, c = 0, e = [], b = 1; b <= 2; b++) { d = b == 1 ? "AM" : "PM"; for (c = 1; c <= 12; c++) b == 1 && c == 12 ? e.push({ id: c + 12 * (b - 1), name: "Noon" }) : e.push({ id: c + 12 * (b - 1), name: c.toString() + " " + d }) } loadComboBox(e, a, "Pick Hour") } catch (f) { alert("loadHoursCombo: " + f.description) } }
function getParameterByName(a) { a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]"); a = RegExp("[\\?&]" + a + "=([^&#]*)").exec(window.location.href); return a == null ? "" : decodeURIComponent(a[1].replace(/\+/g, " ")) } function moveTo(a, d) { try { var b = a || window.event; (b.which || b.keyCode) == 13 && document.getElementById(d.id).focus() } catch (c) { alert("moveTo: " + c.Description) } }
function checkLength(a, d, b, c) { return a.val().length > c || a.val().length < b ? (a.addClass("ui-state-error"), updateTips("Length of " + d + " must be between " + b + " and " + c + "."), false) : true } function updateTips(a) { tips.text(a).addClass("ui-state-highlight"); setTimeout(function () { tips.removeClass("ui-state-highlight", 1500) }, 500) } function removeAllChildNodes(a) { if (a && a.hasChildNodes && a.removeChild) for (; a.hasChildNodes(); ) a.removeChild(a.firstChild) }
function validateEmail(a) { return /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/.test(a) } function setComboBoxOption(a, d) { try { for (var b = 0; b < a.length; b++) { var c = a[b].getAttribute("data-id"); if (d == c) { a.selectedIndex = b; break } } } catch (e) { alert("setComboBoxOption: " + e.description) } } function getComboBoxSelectedOption(a) { try { return a[a.selectedIndex].getAttribute("data-id") } catch (d) { alert("getComboBoxSelectedOption: " + itmName) } }
function getJsonRecord(a, d) { try { for (var b = null, c = 0; c < a.length; c++) { var e = eval("(" + a[c] + ")"); if (e.id == d) { b = e; break } } return b } catch (f) { alert("getJsonRecord: " + f.description) } }
function loadComboBox(a, d, b) { try { removeAllChildNodes(d); var c = document.createElement("option"); $(c).attr("data-id", 0); d.appendChild(c); var e = document.createTextNode("[" + b + "]"); c.appendChild(e); for (b = 0; b < a.length; b++) { c = ""; try { c = eval("(" + a[b] + ")") } catch (f) { c = a[b] } var g = document.createElement("option"); d.appendChild(g); $(g).attr("data-id", c.id); var i = document.createTextNode(c.name); g.appendChild(i) } return d } catch (j) { alert("loadComboBox: " + j.description) } }
function getDeviceFromJson(a) { try { for (var d = null, b = 0; b < jsonDevices.myDevices.length; b++) if (d = eval("(" + jsonDevices.myDevices[b] + ")"), a == d.deviceId) break; return d } catch (c) { alert("getDeviceFromJson: " + c.description) } } function eventColor(a) { try { var d = "#ffffff"; switch (a) { case "01": d = "#7bccfb"; break; case "02": d = "#fc655a"; break; case "03": d = "#51ec51"; break; case "04": d = "#ffff00"; break; case "05": d = "#fc655a" } return d } catch (b) { alert("eventColor: " + b.description) } }
function setWelcomeTitle() { try { $("#welcomeTitleSpan").text(welcomeTitle) } catch (a) { alert("setWelcomeTitle: " + a.description) } } function distanceTo(a, d) { try { return equirectangularDistanceTo(a, d) } catch (b) { alert("distanceTo: " + b.description) } }
function haversineDistanceTo(a, d) { try { var b = a.x.toRad(), c = a.y.toRad(), e = d.x.toRad(), f = d.y.toRad(), g = e - b, i = f - c, j = (f - c) * Math.cos((b + e) / 2), c = e - b, k = Math.sqrt(j * j + c * c) * 6371, l = Math.sin(g / 2) * Math.sin(g / 2) + Math.cos(b) * Math.cos(e) * Math.sin(i / 2) * Math.sin(i / 2), k = 6371 * 2 * Math.atan2(Math.sqrt(l), Math.sqrt(1 - l)); return k.toPrecisionFixed(4) } catch (m) { alert("haversineDistanceTo: " + m.description) } }
function equirectangularDistanceTo(a, d) { try { var b = a.lat().toRad(), c = a.lng().toRad(), e = d.lat().toRad(), f = d.lng().toRad(), g = e - b, i = (f - c) * Math.cos((b + e) / 2); return (Math.sqrt(i * i + g * g) * 3958.755864232).toFixed(2) } catch (j) { alert("equirectangularDistanceTo: " + j.description) } } if (typeof Number.prototype.toRad === "undefined") Number.prototype.toRad = function () { return this * Math.PI / 180 };
function buildAddress(a, d, b, c) { try { var e = ""; a != null && a.length > 0 && (e = a); d != null && d.length > 0 && (e = e.length == 0 ? d : e + ", " + d); b != null && b.length > 0 && (e = e.length == 0 ? b : e + ", " + b); c != null && c.length > 0 && (e = e.length == 0 ? c : e + ", " + c); return e } catch (f) { alert("buildAddress: " + f.description) } }
function buildDispatchAddress() { try { var a = $("#dispatchStreet").attr("value"), d = $("#dispatchCity").attr("value"), b = $("#dispatchState").attr("value"), c = $("#dispatchPostalCode").attr("value"); return buildAddress(a, d, b, c) } catch (e) { alert("buildDispatchAddress: " + e.description) } }
function buildGeofenceFormAddress() { try { var a = $("#geoFormStreet").attr("value"), d = $("#geoFormCity").attr("value"), b = $("#geoFormState").attr("value"), c = $("#geoFormPostalCode").attr("value"); return buildAddress(a, d, b, c) } catch (e) { alert("buildDispatchAddress: " + e.description) } };